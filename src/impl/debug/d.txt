Grammar:

Rule 0     S' -> statement
Rule 1     statement -> var_assign
Rule 2     statement -> condition
Rule 3     statement -> FOR IDENTIFIER IN expr {
Rule 4     statement -> WHILE ( condition ) {
Rule 5     statement -> ELSE {
Rule 6     statement -> IF ( condition ) {
Rule 7     statement -> IDENTIFIER + +  [precedence=left, level=1]
Rule 8     statement -> ARROWOP GLOBAL IDENTIFIER
Rule 9     statement -> expr ARROWOP IDENTIFIER ( )
Rule 10    statement -> ARROWOP IDENTIFIER
Rule 11    statement -> WRITE condition
Rule 12    statement -> WRITE expr
Rule 13    statement -> expr
Rule 14    statement -> IDENTIFIER ARRAY = expr
Rule 15    statement -> } END
Rule 16    statement -> ASSERT ( condition ) , expr
Rule 17    statement -> EXCEPT {
Rule 18    statement -> TRY {
Rule 19    statement -> }
Rule 20    statement -> INCLUDE STRING
Rule 21    statement -> RETURN condition
Rule 22    statement -> RETURN expr
Rule 23    statement -> FUNCTION IDENTIFIER ( ) {
Rule 24    expr -> IDENTIFIER ( )
Rule 25    expr -> PARAM expr
Rule 26    expr -> ARGV
Rule 27    expr -> ARGC
Rule 28    expr -> expr ARRAY
Rule 29    expr -> ARRAY
Rule 30    expr -> FLOAT
Rule 31    expr -> GLOBAL IDENTIFIER
Rule 32    expr -> IDENTIFIER
Rule 33    expr -> ( expr )
Rule 34    expr -> - expr  [precedence=right, level=3]
Rule 35    expr -> NUMBER
Rule 36    expr -> STRING
Rule 37    expr -> expr / expr  [precedence=left, level=2]
Rule 38    expr -> expr * expr  [precedence=left, level=2]
Rule 39    expr -> expr ^ expr
Rule 40    expr -> expr % expr
Rule 41    expr -> expr - expr  [precedence=left, level=1]
Rule 42    expr -> expr + expr  [precedence=left, level=1]
Rule 43    expr -> TYPEOF expr
Rule 44    condition -> expr < expr
Rule 45    condition -> expr NOTEQ expr
Rule 46    condition -> expr EQSTHAN expr
Rule 47    condition -> expr EQGTHAN expr
Rule 48    condition -> expr > expr
Rule 49    condition -> expr EQEQ expr
Rule 50    condition -> FALSE
Rule 51    condition -> TRUE
Rule 52    var_assign -> GLOBAL IDENTIFIER = condition
Rule 53    var_assign -> GLOBAL IDENTIFIER = expr
Rule 54    var_assign -> IDENTIFIER = condition
Rule 55    var_assign -> IDENTIFIER = expr

Terminals, with rules where they appear:

%                    : 40
(                    : 4 6 9 16 23 24 33
)                    : 4 6 9 16 23 24 33
*                    : 38
+                    : 7 7 42
,                    : 16
-                    : 34 41
/                    : 37
<                    : 44
=                    : 14 52 53 54 55
>                    : 48
ARGC                 : 27
ARGV                 : 26
ARRAY                : 14 28 29
ARROWOP              : 8 9 10
ASSERT               : 16
ELSE                 : 5
END                  : 15
EQEQ                 : 49
EQGTHAN              : 47
EQSTHAN              : 46
EXCEPT               : 17
FALSE                : 50
FLOAT                : 30
FOR                  : 3
FUNCTION             : 23
GLOBAL               : 8 31 52 53
IDENTIFIER           : 3 7 8 9 10 14 23 24 31 32 52 53 54 55
IF                   : 6
IN                   : 3
INCLUDE              : 20
NOTEQ                : 45
NUMBER               : 35
PARAM                : 25
RETURN               : 21 22
STRING               : 20 36
TRUE                 : 51
TRY                  : 18
TYPEOF               : 43
WHILE                : 4
WRITE                : 11 12
^                    : 39
error                : 
{                    : 3 4 5 6 17 18 23
}                    : 15 19

Nonterminals, with rules where they appear:

condition            : 2 4 6 11 16 21 52 54
expr                 : 3 9 12 13 14 16 22 25 28 33 34 37 37 38 38 39 39 40 40 41 41 42 42 43 44 44 45 45 46 46 47 47 48 48 49 49 53 55
statement            : 0
var_assign           : 1


state 0

    (0) S' -> . statement
    (1) statement -> . var_assign
    (2) statement -> . condition
    (3) statement -> . FOR IDENTIFIER IN expr {
    (4) statement -> . WHILE ( condition ) {
    (5) statement -> . ELSE {
    (6) statement -> . IF ( condition ) {
    (7) statement -> . IDENTIFIER + +
    (8) statement -> . ARROWOP GLOBAL IDENTIFIER
    (9) statement -> . expr ARROWOP IDENTIFIER ( )
    (10) statement -> . ARROWOP IDENTIFIER
    (11) statement -> . WRITE condition
    (12) statement -> . WRITE expr
    (13) statement -> . expr
    (14) statement -> . IDENTIFIER ARRAY = expr
    (15) statement -> . } END
    (16) statement -> . ASSERT ( condition ) , expr
    (17) statement -> . EXCEPT {
    (18) statement -> . TRY {
    (19) statement -> . }
    (20) statement -> . INCLUDE STRING
    (21) statement -> . RETURN condition
    (22) statement -> . RETURN expr
    (23) statement -> . FUNCTION IDENTIFIER ( ) {
    (52) var_assign -> . GLOBAL IDENTIFIER = condition
    (53) var_assign -> . GLOBAL IDENTIFIER = expr
    (54) var_assign -> . IDENTIFIER = condition
    (55) var_assign -> . IDENTIFIER = expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FOR             shift and go to state 4
    WHILE           shift and go to state 7
    ELSE            shift and go to state 9
    IF              shift and go to state 10
    IDENTIFIER      shift and go to state 5
    ARROWOP         shift and go to state 11
    WRITE           shift and go to state 13
    }               shift and go to state 15
    ASSERT          shift and go to state 16
    EXCEPT          shift and go to state 17
    TRY             shift and go to state 18
    INCLUDE         shift and go to state 19
    RETURN          shift and go to state 21
    FUNCTION        shift and go to state 22
    GLOBAL          shift and go to state 12
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    statement                      shift and go to state 1
    var_assign                     shift and go to state 2
    condition                      shift and go to state 3
    expr                           shift and go to state 6

state 1

    (0) S' -> statement .


state 2

    (1) statement -> var_assign .
    $end            reduce using rule 1 (statement -> var_assign .)


state 3

    (2) statement -> condition .
    $end            reduce using rule 2 (statement -> condition .)


state 4

    (3) statement -> FOR . IDENTIFIER IN expr {
    IDENTIFIER      shift and go to state 32


state 5

    (7) statement -> IDENTIFIER . + +
    (14) statement -> IDENTIFIER . ARRAY = expr
    (54) var_assign -> IDENTIFIER . = condition
    (55) var_assign -> IDENTIFIER . = expr
    (24) expr -> IDENTIFIER . ( )
    (32) expr -> IDENTIFIER .
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for + resolved as shift
    +               shift and go to state 33
    ARRAY           shift and go to state 34
    =               shift and go to state 35
    (               shift and go to state 36
    ARROWOP         reduce using rule 32 (expr -> IDENTIFIER .)
    <               reduce using rule 32 (expr -> IDENTIFIER .)
    NOTEQ           reduce using rule 32 (expr -> IDENTIFIER .)
    EQSTHAN         reduce using rule 32 (expr -> IDENTIFIER .)
    EQGTHAN         reduce using rule 32 (expr -> IDENTIFIER .)
    >               reduce using rule 32 (expr -> IDENTIFIER .)
    EQEQ            reduce using rule 32 (expr -> IDENTIFIER .)
    /               reduce using rule 32 (expr -> IDENTIFIER .)
    *               reduce using rule 32 (expr -> IDENTIFIER .)
    ^               reduce using rule 32 (expr -> IDENTIFIER .)
    %               reduce using rule 32 (expr -> IDENTIFIER .)
    -               reduce using rule 32 (expr -> IDENTIFIER .)
    $end            reduce using rule 32 (expr -> IDENTIFIER .)


state 6

    (9) statement -> expr . ARROWOP IDENTIFIER ( )
    (13) statement -> expr .
    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         shift and go to state 37
    $end            reduce using rule 13 (statement -> expr .)
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 7

    (4) statement -> WHILE . ( condition ) {
    (               shift and go to state 51


state 8

    (33) expr -> ( . expr )
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 52

state 9

    (5) statement -> ELSE . {
    {               shift and go to state 55


state 10

    (6) statement -> IF . ( condition ) {
    (               shift and go to state 56


state 11

    (8) statement -> ARROWOP . GLOBAL IDENTIFIER
    (10) statement -> ARROWOP . IDENTIFIER
    GLOBAL          shift and go to state 57
    IDENTIFIER      shift and go to state 58


state 12

    (52) var_assign -> GLOBAL . IDENTIFIER = condition
    (53) var_assign -> GLOBAL . IDENTIFIER = expr
    (31) expr -> GLOBAL . IDENTIFIER
    IDENTIFIER      shift and go to state 59


state 13

    (11) statement -> WRITE . condition
    (12) statement -> WRITE . expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 60
    expr                           shift and go to state 61

state 14

    (29) expr -> ARRAY .
    ARROWOP         reduce using rule 29 (expr -> ARRAY .)
    <               reduce using rule 29 (expr -> ARRAY .)
    NOTEQ           reduce using rule 29 (expr -> ARRAY .)
    EQSTHAN         reduce using rule 29 (expr -> ARRAY .)
    EQGTHAN         reduce using rule 29 (expr -> ARRAY .)
    >               reduce using rule 29 (expr -> ARRAY .)
    EQEQ            reduce using rule 29 (expr -> ARRAY .)
    ARRAY           reduce using rule 29 (expr -> ARRAY .)
    /               reduce using rule 29 (expr -> ARRAY .)
    *               reduce using rule 29 (expr -> ARRAY .)
    ^               reduce using rule 29 (expr -> ARRAY .)
    %               reduce using rule 29 (expr -> ARRAY .)
    -               reduce using rule 29 (expr -> ARRAY .)
    +               reduce using rule 29 (expr -> ARRAY .)
    $end            reduce using rule 29 (expr -> ARRAY .)
    )               reduce using rule 29 (expr -> ARRAY .)
    {               reduce using rule 29 (expr -> ARRAY .)


state 15

    (15) statement -> } . END
    (19) statement -> } .
    END             shift and go to state 62
    $end            reduce using rule 19 (statement -> } .)


state 16

    (16) statement -> ASSERT . ( condition ) , expr
    (               shift and go to state 63


state 17

    (17) statement -> EXCEPT . {
    {               shift and go to state 64


state 18

    (18) statement -> TRY . {
    {               shift and go to state 65


state 19

    (20) statement -> INCLUDE . STRING
    STRING          shift and go to state 66


state 20

    (36) expr -> STRING .
    ARROWOP         reduce using rule 36 (expr -> STRING .)
    <               reduce using rule 36 (expr -> STRING .)
    NOTEQ           reduce using rule 36 (expr -> STRING .)
    EQSTHAN         reduce using rule 36 (expr -> STRING .)
    EQGTHAN         reduce using rule 36 (expr -> STRING .)
    >               reduce using rule 36 (expr -> STRING .)
    EQEQ            reduce using rule 36 (expr -> STRING .)
    ARRAY           reduce using rule 36 (expr -> STRING .)
    /               reduce using rule 36 (expr -> STRING .)
    *               reduce using rule 36 (expr -> STRING .)
    ^               reduce using rule 36 (expr -> STRING .)
    %               reduce using rule 36 (expr -> STRING .)
    -               reduce using rule 36 (expr -> STRING .)
    +               reduce using rule 36 (expr -> STRING .)
    $end            reduce using rule 36 (expr -> STRING .)
    )               reduce using rule 36 (expr -> STRING .)
    {               reduce using rule 36 (expr -> STRING .)


state 21

    (21) statement -> RETURN . condition
    (22) statement -> RETURN . expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 67
    expr                           shift and go to state 68

state 22

    (23) statement -> FUNCTION . IDENTIFIER ( ) {
    IDENTIFIER      shift and go to state 69


state 23

    (50) condition -> FALSE .
    $end            reduce using rule 50 (condition -> FALSE .)
    )               reduce using rule 50 (condition -> FALSE .)


state 24

    (51) condition -> TRUE .
    $end            reduce using rule 51 (condition -> TRUE .)
    )               reduce using rule 51 (condition -> TRUE .)


state 25

    (25) expr -> PARAM . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 70

state 26

    (26) expr -> ARGV .
    ARROWOP         reduce using rule 26 (expr -> ARGV .)
    <               reduce using rule 26 (expr -> ARGV .)
    NOTEQ           reduce using rule 26 (expr -> ARGV .)
    EQSTHAN         reduce using rule 26 (expr -> ARGV .)
    EQGTHAN         reduce using rule 26 (expr -> ARGV .)
    >               reduce using rule 26 (expr -> ARGV .)
    EQEQ            reduce using rule 26 (expr -> ARGV .)
    ARRAY           reduce using rule 26 (expr -> ARGV .)
    /               reduce using rule 26 (expr -> ARGV .)
    *               reduce using rule 26 (expr -> ARGV .)
    ^               reduce using rule 26 (expr -> ARGV .)
    %               reduce using rule 26 (expr -> ARGV .)
    -               reduce using rule 26 (expr -> ARGV .)
    +               reduce using rule 26 (expr -> ARGV .)
    $end            reduce using rule 26 (expr -> ARGV .)
    )               reduce using rule 26 (expr -> ARGV .)
    {               reduce using rule 26 (expr -> ARGV .)


state 27

    (27) expr -> ARGC .
    ARROWOP         reduce using rule 27 (expr -> ARGC .)
    <               reduce using rule 27 (expr -> ARGC .)
    NOTEQ           reduce using rule 27 (expr -> ARGC .)
    EQSTHAN         reduce using rule 27 (expr -> ARGC .)
    EQGTHAN         reduce using rule 27 (expr -> ARGC .)
    >               reduce using rule 27 (expr -> ARGC .)
    EQEQ            reduce using rule 27 (expr -> ARGC .)
    ARRAY           reduce using rule 27 (expr -> ARGC .)
    /               reduce using rule 27 (expr -> ARGC .)
    *               reduce using rule 27 (expr -> ARGC .)
    ^               reduce using rule 27 (expr -> ARGC .)
    %               reduce using rule 27 (expr -> ARGC .)
    -               reduce using rule 27 (expr -> ARGC .)
    +               reduce using rule 27 (expr -> ARGC .)
    $end            reduce using rule 27 (expr -> ARGC .)
    )               reduce using rule 27 (expr -> ARGC .)
    {               reduce using rule 27 (expr -> ARGC .)


state 28

    (30) expr -> FLOAT .
    ARROWOP         reduce using rule 30 (expr -> FLOAT .)
    <               reduce using rule 30 (expr -> FLOAT .)
    NOTEQ           reduce using rule 30 (expr -> FLOAT .)
    EQSTHAN         reduce using rule 30 (expr -> FLOAT .)
    EQGTHAN         reduce using rule 30 (expr -> FLOAT .)
    >               reduce using rule 30 (expr -> FLOAT .)
    EQEQ            reduce using rule 30 (expr -> FLOAT .)
    ARRAY           reduce using rule 30 (expr -> FLOAT .)
    /               reduce using rule 30 (expr -> FLOAT .)
    *               reduce using rule 30 (expr -> FLOAT .)
    ^               reduce using rule 30 (expr -> FLOAT .)
    %               reduce using rule 30 (expr -> FLOAT .)
    -               reduce using rule 30 (expr -> FLOAT .)
    +               reduce using rule 30 (expr -> FLOAT .)
    $end            reduce using rule 30 (expr -> FLOAT .)
    )               reduce using rule 30 (expr -> FLOAT .)
    {               reduce using rule 30 (expr -> FLOAT .)


state 29

    (34) expr -> - . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 71

state 30

    (35) expr -> NUMBER .
    ARROWOP         reduce using rule 35 (expr -> NUMBER .)
    <               reduce using rule 35 (expr -> NUMBER .)
    NOTEQ           reduce using rule 35 (expr -> NUMBER .)
    EQSTHAN         reduce using rule 35 (expr -> NUMBER .)
    EQGTHAN         reduce using rule 35 (expr -> NUMBER .)
    >               reduce using rule 35 (expr -> NUMBER .)
    EQEQ            reduce using rule 35 (expr -> NUMBER .)
    ARRAY           reduce using rule 35 (expr -> NUMBER .)
    /               reduce using rule 35 (expr -> NUMBER .)
    *               reduce using rule 35 (expr -> NUMBER .)
    ^               reduce using rule 35 (expr -> NUMBER .)
    %               reduce using rule 35 (expr -> NUMBER .)
    -               reduce using rule 35 (expr -> NUMBER .)
    +               reduce using rule 35 (expr -> NUMBER .)
    $end            reduce using rule 35 (expr -> NUMBER .)
    )               reduce using rule 35 (expr -> NUMBER .)
    {               reduce using rule 35 (expr -> NUMBER .)


state 31

    (43) expr -> TYPEOF . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 72

state 32

    (3) statement -> FOR IDENTIFIER . IN expr {
    IN              shift and go to state 73


state 33

    (7) statement -> IDENTIFIER + . +
    +               shift and go to state 74


state 34

    (14) statement -> IDENTIFIER ARRAY . = expr
    =               shift and go to state 75


state 35

    (54) var_assign -> IDENTIFIER = . condition
    (55) var_assign -> IDENTIFIER = . expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 76
    expr                           shift and go to state 77

state 36

    (24) expr -> IDENTIFIER ( . )
    )               shift and go to state 78


state 37

    (9) statement -> expr ARROWOP . IDENTIFIER ( )
    IDENTIFIER      shift and go to state 79


state 38

    (44) condition -> expr < . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 80

state 39

    (45) condition -> expr NOTEQ . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 81

state 40

    (46) condition -> expr EQSTHAN . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 82

state 41

    (47) condition -> expr EQGTHAN . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 83

state 42

    (48) condition -> expr > . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 84

state 43

    (49) condition -> expr EQEQ . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 85

state 44

    (28) expr -> expr ARRAY .
    ARROWOP         reduce using rule 28 (expr -> expr ARRAY .)
    <               reduce using rule 28 (expr -> expr ARRAY .)
    NOTEQ           reduce using rule 28 (expr -> expr ARRAY .)
    EQSTHAN         reduce using rule 28 (expr -> expr ARRAY .)
    EQGTHAN         reduce using rule 28 (expr -> expr ARRAY .)
    >               reduce using rule 28 (expr -> expr ARRAY .)
    EQEQ            reduce using rule 28 (expr -> expr ARRAY .)
    ARRAY           reduce using rule 28 (expr -> expr ARRAY .)
    /               reduce using rule 28 (expr -> expr ARRAY .)
    *               reduce using rule 28 (expr -> expr ARRAY .)
    ^               reduce using rule 28 (expr -> expr ARRAY .)
    %               reduce using rule 28 (expr -> expr ARRAY .)
    -               reduce using rule 28 (expr -> expr ARRAY .)
    +               reduce using rule 28 (expr -> expr ARRAY .)
    $end            reduce using rule 28 (expr -> expr ARRAY .)
    )               reduce using rule 28 (expr -> expr ARRAY .)
    {               reduce using rule 28 (expr -> expr ARRAY .)


state 45

    (37) expr -> expr / . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 86

state 46

    (38) expr -> expr * . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 87

state 47

    (39) expr -> expr ^ . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 88

state 48

    (40) expr -> expr % . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 89

state 49

    (41) expr -> expr - . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 90

state 50

    (42) expr -> expr + . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 91

state 51

    (4) statement -> WHILE ( . condition ) {
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 92
    expr                           shift and go to state 93

state 52

    (33) expr -> ( expr . )
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    )               shift and go to state 94
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 53

    (24) expr -> IDENTIFIER . ( )
    (32) expr -> IDENTIFIER .
    (               shift and go to state 36
    )               reduce using rule 32 (expr -> IDENTIFIER .)
    ARRAY           reduce using rule 32 (expr -> IDENTIFIER .)
    /               reduce using rule 32 (expr -> IDENTIFIER .)
    *               reduce using rule 32 (expr -> IDENTIFIER .)
    ^               reduce using rule 32 (expr -> IDENTIFIER .)
    %               reduce using rule 32 (expr -> IDENTIFIER .)
    -               reduce using rule 32 (expr -> IDENTIFIER .)
    +               reduce using rule 32 (expr -> IDENTIFIER .)
    <               reduce using rule 32 (expr -> IDENTIFIER .)
    NOTEQ           reduce using rule 32 (expr -> IDENTIFIER .)
    EQSTHAN         reduce using rule 32 (expr -> IDENTIFIER .)
    EQGTHAN         reduce using rule 32 (expr -> IDENTIFIER .)
    >               reduce using rule 32 (expr -> IDENTIFIER .)
    EQEQ            reduce using rule 32 (expr -> IDENTIFIER .)
    $end            reduce using rule 32 (expr -> IDENTIFIER .)
    ARROWOP         reduce using rule 32 (expr -> IDENTIFIER .)
    {               reduce using rule 32 (expr -> IDENTIFIER .)


state 54

    (31) expr -> GLOBAL . IDENTIFIER
    IDENTIFIER      shift and go to state 95


state 55

    (5) statement -> ELSE { .
    $end            reduce using rule 5 (statement -> ELSE { .)


state 56

    (6) statement -> IF ( . condition ) {
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 96
    expr                           shift and go to state 93

state 57

    (8) statement -> ARROWOP GLOBAL . IDENTIFIER
    IDENTIFIER      shift and go to state 97


state 58

    (10) statement -> ARROWOP IDENTIFIER .
    $end            reduce using rule 10 (statement -> ARROWOP IDENTIFIER .)


state 59

    (52) var_assign -> GLOBAL IDENTIFIER . = condition
    (53) var_assign -> GLOBAL IDENTIFIER . = expr
    (31) expr -> GLOBAL IDENTIFIER .
    =               shift and go to state 98
    ARROWOP         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    <               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    NOTEQ           reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQSTHAN         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQGTHAN         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    >               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQEQ            reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    ARRAY           reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    /               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    *               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    ^               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    %               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    -               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    +               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    $end            reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)


state 60

    (11) statement -> WRITE condition .
    $end            reduce using rule 11 (statement -> WRITE condition .)


state 61

    (12) statement -> WRITE expr .
    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 12 (statement -> WRITE expr .)
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 62

    (15) statement -> } END .
    $end            reduce using rule 15 (statement -> } END .)


state 63

    (16) statement -> ASSERT ( . condition ) , expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 99
    expr                           shift and go to state 93

state 64

    (17) statement -> EXCEPT { .
    $end            reduce using rule 17 (statement -> EXCEPT { .)


state 65

    (18) statement -> TRY { .
    $end            reduce using rule 18 (statement -> TRY { .)


state 66

    (20) statement -> INCLUDE STRING .
    $end            reduce using rule 20 (statement -> INCLUDE STRING .)


state 67

    (21) statement -> RETURN condition .
    $end            reduce using rule 21 (statement -> RETURN condition .)


state 68

    (22) statement -> RETURN expr .
    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 22 (statement -> RETURN expr .)
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 69

    (23) statement -> FUNCTION IDENTIFIER . ( ) {
    (               shift and go to state 100


state 70

    (25) expr -> PARAM expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ARROWOP         reduce using rule 25 (expr -> PARAM expr .)
    <               reduce using rule 25 (expr -> PARAM expr .)
    NOTEQ           reduce using rule 25 (expr -> PARAM expr .)
    EQSTHAN         reduce using rule 25 (expr -> PARAM expr .)
    EQGTHAN         reduce using rule 25 (expr -> PARAM expr .)
    >               reduce using rule 25 (expr -> PARAM expr .)
    EQEQ            reduce using rule 25 (expr -> PARAM expr .)
    $end            reduce using rule 25 (expr -> PARAM expr .)
    )               reduce using rule 25 (expr -> PARAM expr .)
    {               reduce using rule 25 (expr -> PARAM expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 71

    (34) expr -> - expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         reduce using rule 34 (expr -> - expr .)
    <               reduce using rule 34 (expr -> - expr .)
    NOTEQ           reduce using rule 34 (expr -> - expr .)
    EQSTHAN         reduce using rule 34 (expr -> - expr .)
    EQGTHAN         reduce using rule 34 (expr -> - expr .)
    >               reduce using rule 34 (expr -> - expr .)
    EQEQ            reduce using rule 34 (expr -> - expr .)
    ARRAY           reduce using rule 34 (expr -> - expr .)
    /               reduce using rule 34 (expr -> - expr .)
    *               reduce using rule 34 (expr -> - expr .)
    ^               reduce using rule 34 (expr -> - expr .)
    %               reduce using rule 34 (expr -> - expr .)
    -               reduce using rule 34 (expr -> - expr .)
    +               reduce using rule 34 (expr -> - expr .)
    $end            reduce using rule 34 (expr -> - expr .)
    )               reduce using rule 34 (expr -> - expr .)
    {               reduce using rule 34 (expr -> - expr .)


state 72

    (43) expr -> TYPEOF expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ARROWOP         reduce using rule 43 (expr -> TYPEOF expr .)
    <               reduce using rule 43 (expr -> TYPEOF expr .)
    NOTEQ           reduce using rule 43 (expr -> TYPEOF expr .)
    EQSTHAN         reduce using rule 43 (expr -> TYPEOF expr .)
    EQGTHAN         reduce using rule 43 (expr -> TYPEOF expr .)
    >               reduce using rule 43 (expr -> TYPEOF expr .)
    EQEQ            reduce using rule 43 (expr -> TYPEOF expr .)
    $end            reduce using rule 43 (expr -> TYPEOF expr .)
    )               reduce using rule 43 (expr -> TYPEOF expr .)
    {               reduce using rule 43 (expr -> TYPEOF expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 73

    (3) statement -> FOR IDENTIFIER IN . expr {
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 101

state 74

    (7) statement -> IDENTIFIER + + .
    $end            reduce using rule 7 (statement -> IDENTIFIER + + .)


state 75

    (14) statement -> IDENTIFIER ARRAY = . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 102

state 76

    (54) var_assign -> IDENTIFIER = condition .
    $end            reduce using rule 54 (var_assign -> IDENTIFIER = condition .)


state 77

    (55) var_assign -> IDENTIFIER = expr .
    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 55 (var_assign -> IDENTIFIER = expr .)
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 78

    (24) expr -> IDENTIFIER ( ) .
    ARROWOP         reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    <               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    NOTEQ           reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    EQSTHAN         reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    EQGTHAN         reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    >               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    EQEQ            reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    ARRAY           reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    /               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    *               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    ^               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    %               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    -               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    +               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    $end            reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    )               reduce using rule 24 (expr -> IDENTIFIER ( ) .)
    {               reduce using rule 24 (expr -> IDENTIFIER ( ) .)


state 79

    (9) statement -> expr ARROWOP IDENTIFIER . ( )
    (               shift and go to state 103


state 80

    (44) condition -> expr < expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 44 (condition -> expr < expr .)
    )               reduce using rule 44 (condition -> expr < expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 81

    (45) condition -> expr NOTEQ expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 45 (condition -> expr NOTEQ expr .)
    )               reduce using rule 45 (condition -> expr NOTEQ expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 82

    (46) condition -> expr EQSTHAN expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 46 (condition -> expr EQSTHAN expr .)
    )               reduce using rule 46 (condition -> expr EQSTHAN expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 83

    (47) condition -> expr EQGTHAN expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 47 (condition -> expr EQGTHAN expr .)
    )               reduce using rule 47 (condition -> expr EQGTHAN expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 84

    (48) condition -> expr > expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 48 (condition -> expr > expr .)
    )               reduce using rule 48 (condition -> expr > expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 85

    (49) condition -> expr EQEQ expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 49 (condition -> expr EQEQ expr .)
    )               reduce using rule 49 (condition -> expr EQEQ expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 86

    (37) expr -> expr / expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         reduce using rule 37 (expr -> expr / expr .)
    <               reduce using rule 37 (expr -> expr / expr .)
    NOTEQ           reduce using rule 37 (expr -> expr / expr .)
    EQSTHAN         reduce using rule 37 (expr -> expr / expr .)
    EQGTHAN         reduce using rule 37 (expr -> expr / expr .)
    >               reduce using rule 37 (expr -> expr / expr .)
    EQEQ            reduce using rule 37 (expr -> expr / expr .)
    ARRAY           reduce using rule 37 (expr -> expr / expr .)
    /               reduce using rule 37 (expr -> expr / expr .)
    *               reduce using rule 37 (expr -> expr / expr .)
    ^               reduce using rule 37 (expr -> expr / expr .)
    %               reduce using rule 37 (expr -> expr / expr .)
    -               reduce using rule 37 (expr -> expr / expr .)
    +               reduce using rule 37 (expr -> expr / expr .)
    $end            reduce using rule 37 (expr -> expr / expr .)
    )               reduce using rule 37 (expr -> expr / expr .)
    {               reduce using rule 37 (expr -> expr / expr .)


state 87

    (38) expr -> expr * expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         reduce using rule 38 (expr -> expr * expr .)
    <               reduce using rule 38 (expr -> expr * expr .)
    NOTEQ           reduce using rule 38 (expr -> expr * expr .)
    EQSTHAN         reduce using rule 38 (expr -> expr * expr .)
    EQGTHAN         reduce using rule 38 (expr -> expr * expr .)
    >               reduce using rule 38 (expr -> expr * expr .)
    EQEQ            reduce using rule 38 (expr -> expr * expr .)
    ARRAY           reduce using rule 38 (expr -> expr * expr .)
    /               reduce using rule 38 (expr -> expr * expr .)
    *               reduce using rule 38 (expr -> expr * expr .)
    ^               reduce using rule 38 (expr -> expr * expr .)
    %               reduce using rule 38 (expr -> expr * expr .)
    -               reduce using rule 38 (expr -> expr * expr .)
    +               reduce using rule 38 (expr -> expr * expr .)
    $end            reduce using rule 38 (expr -> expr * expr .)
    )               reduce using rule 38 (expr -> expr * expr .)
    {               reduce using rule 38 (expr -> expr * expr .)


state 88

    (39) expr -> expr ^ expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ARROWOP         reduce using rule 39 (expr -> expr ^ expr .)
    <               reduce using rule 39 (expr -> expr ^ expr .)
    NOTEQ           reduce using rule 39 (expr -> expr ^ expr .)
    EQSTHAN         reduce using rule 39 (expr -> expr ^ expr .)
    EQGTHAN         reduce using rule 39 (expr -> expr ^ expr .)
    >               reduce using rule 39 (expr -> expr ^ expr .)
    EQEQ            reduce using rule 39 (expr -> expr ^ expr .)
    $end            reduce using rule 39 (expr -> expr ^ expr .)
    )               reduce using rule 39 (expr -> expr ^ expr .)
    {               reduce using rule 39 (expr -> expr ^ expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 89

    (40) expr -> expr % expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    ARROWOP         reduce using rule 40 (expr -> expr % expr .)
    <               reduce using rule 40 (expr -> expr % expr .)
    NOTEQ           reduce using rule 40 (expr -> expr % expr .)
    EQSTHAN         reduce using rule 40 (expr -> expr % expr .)
    EQGTHAN         reduce using rule 40 (expr -> expr % expr .)
    >               reduce using rule 40 (expr -> expr % expr .)
    EQEQ            reduce using rule 40 (expr -> expr % expr .)
    $end            reduce using rule 40 (expr -> expr % expr .)
    )               reduce using rule 40 (expr -> expr % expr .)
    {               reduce using rule 40 (expr -> expr % expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 90

    (41) expr -> expr - expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         reduce using rule 41 (expr -> expr - expr .)
    <               reduce using rule 41 (expr -> expr - expr .)
    NOTEQ           reduce using rule 41 (expr -> expr - expr .)
    EQSTHAN         reduce using rule 41 (expr -> expr - expr .)
    EQGTHAN         reduce using rule 41 (expr -> expr - expr .)
    >               reduce using rule 41 (expr -> expr - expr .)
    EQEQ            reduce using rule 41 (expr -> expr - expr .)
    ARRAY           reduce using rule 41 (expr -> expr - expr .)
    ^               reduce using rule 41 (expr -> expr - expr .)
    %               reduce using rule 41 (expr -> expr - expr .)
    -               reduce using rule 41 (expr -> expr - expr .)
    +               reduce using rule 41 (expr -> expr - expr .)
    $end            reduce using rule 41 (expr -> expr - expr .)
    )               reduce using rule 41 (expr -> expr - expr .)
    {               reduce using rule 41 (expr -> expr - expr .)
    /               shift and go to state 45
    *               shift and go to state 46


state 91

    (42) expr -> expr + expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    ARROWOP         reduce using rule 42 (expr -> expr + expr .)
    <               reduce using rule 42 (expr -> expr + expr .)
    NOTEQ           reduce using rule 42 (expr -> expr + expr .)
    EQSTHAN         reduce using rule 42 (expr -> expr + expr .)
    EQGTHAN         reduce using rule 42 (expr -> expr + expr .)
    >               reduce using rule 42 (expr -> expr + expr .)
    EQEQ            reduce using rule 42 (expr -> expr + expr .)
    ARRAY           reduce using rule 42 (expr -> expr + expr .)
    ^               reduce using rule 42 (expr -> expr + expr .)
    %               reduce using rule 42 (expr -> expr + expr .)
    -               reduce using rule 42 (expr -> expr + expr .)
    +               reduce using rule 42 (expr -> expr + expr .)
    $end            reduce using rule 42 (expr -> expr + expr .)
    )               reduce using rule 42 (expr -> expr + expr .)
    {               reduce using rule 42 (expr -> expr + expr .)
    /               shift and go to state 45
    *               shift and go to state 46


state 92

    (4) statement -> WHILE ( condition . ) {
    )               shift and go to state 104


state 93

    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 94

    (33) expr -> ( expr ) .
    ARROWOP         reduce using rule 33 (expr -> ( expr ) .)
    <               reduce using rule 33 (expr -> ( expr ) .)
    NOTEQ           reduce using rule 33 (expr -> ( expr ) .)
    EQSTHAN         reduce using rule 33 (expr -> ( expr ) .)
    EQGTHAN         reduce using rule 33 (expr -> ( expr ) .)
    >               reduce using rule 33 (expr -> ( expr ) .)
    EQEQ            reduce using rule 33 (expr -> ( expr ) .)
    ARRAY           reduce using rule 33 (expr -> ( expr ) .)
    /               reduce using rule 33 (expr -> ( expr ) .)
    *               reduce using rule 33 (expr -> ( expr ) .)
    ^               reduce using rule 33 (expr -> ( expr ) .)
    %               reduce using rule 33 (expr -> ( expr ) .)
    -               reduce using rule 33 (expr -> ( expr ) .)
    +               reduce using rule 33 (expr -> ( expr ) .)
    $end            reduce using rule 33 (expr -> ( expr ) .)
    )               reduce using rule 33 (expr -> ( expr ) .)
    {               reduce using rule 33 (expr -> ( expr ) .)


state 95

    (31) expr -> GLOBAL IDENTIFIER .
    )               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    ARRAY           reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    /               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    *               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    ^               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    %               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    -               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    +               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    <               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    NOTEQ           reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQSTHAN         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQGTHAN         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    >               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    EQEQ            reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    $end            reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    ARROWOP         reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)
    {               reduce using rule 31 (expr -> GLOBAL IDENTIFIER .)


state 96

    (6) statement -> IF ( condition . ) {
    )               shift and go to state 105


state 97

    (8) statement -> ARROWOP GLOBAL IDENTIFIER .
    $end            reduce using rule 8 (statement -> ARROWOP GLOBAL IDENTIFIER .)


state 98

    (52) var_assign -> GLOBAL IDENTIFIER = . condition
    (53) var_assign -> GLOBAL IDENTIFIER = . expr
    (44) condition -> . expr < expr
    (45) condition -> . expr NOTEQ expr
    (46) condition -> . expr EQSTHAN expr
    (47) condition -> . expr EQGTHAN expr
    (48) condition -> . expr > expr
    (49) condition -> . expr EQEQ expr
    (50) condition -> . FALSE
    (51) condition -> . TRUE
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    FALSE           shift and go to state 23
    TRUE            shift and go to state 24
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    condition                      shift and go to state 106
    expr                           shift and go to state 107

state 99

    (16) statement -> ASSERT ( condition . ) , expr
    )               shift and go to state 108


state 100

    (23) statement -> FUNCTION IDENTIFIER ( . ) {
    )               shift and go to state 109


state 101

    (3) statement -> FOR IDENTIFIER IN expr . {
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    {               shift and go to state 110
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 102

    (14) statement -> IDENTIFIER ARRAY = expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 14 (statement -> IDENTIFIER ARRAY = expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 103

    (9) statement -> expr ARROWOP IDENTIFIER ( . )
    )               shift and go to state 111


state 104

    (4) statement -> WHILE ( condition ) . {
    {               shift and go to state 112


state 105

    (6) statement -> IF ( condition ) . {
    {               shift and go to state 113


state 106

    (52) var_assign -> GLOBAL IDENTIFIER = condition .
    $end            reduce using rule 52 (var_assign -> GLOBAL IDENTIFIER = condition .)


state 107

    (53) var_assign -> GLOBAL IDENTIFIER = expr .
    (44) condition -> expr . < expr
    (45) condition -> expr . NOTEQ expr
    (46) condition -> expr . EQSTHAN expr
    (47) condition -> expr . EQGTHAN expr
    (48) condition -> expr . > expr
    (49) condition -> expr . EQEQ expr
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 53 (var_assign -> GLOBAL IDENTIFIER = expr .)
    <               shift and go to state 38
    NOTEQ           shift and go to state 39
    EQSTHAN         shift and go to state 40
    EQGTHAN         shift and go to state 41
    >               shift and go to state 42
    EQEQ            shift and go to state 43
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


state 108

    (16) statement -> ASSERT ( condition ) . , expr
    ,               shift and go to state 114


state 109

    (23) statement -> FUNCTION IDENTIFIER ( ) . {
    {               shift and go to state 115


state 110

    (3) statement -> FOR IDENTIFIER IN expr { .
    $end            reduce using rule 3 (statement -> FOR IDENTIFIER IN expr { .)


state 111

    (9) statement -> expr ARROWOP IDENTIFIER ( ) .
    $end            reduce using rule 9 (statement -> expr ARROWOP IDENTIFIER ( ) .)


state 112

    (4) statement -> WHILE ( condition ) { .
    $end            reduce using rule 4 (statement -> WHILE ( condition ) { .)


state 113

    (6) statement -> IF ( condition ) { .
    $end            reduce using rule 6 (statement -> IF ( condition ) { .)


state 114

    (16) statement -> ASSERT ( condition ) , . expr
    (24) expr -> . IDENTIFIER ( )
    (25) expr -> . PARAM expr
    (26) expr -> . ARGV
    (27) expr -> . ARGC
    (28) expr -> . expr ARRAY
    (29) expr -> . ARRAY
    (30) expr -> . FLOAT
    (31) expr -> . GLOBAL IDENTIFIER
    (32) expr -> . IDENTIFIER
    (33) expr -> . ( expr )
    (34) expr -> . - expr
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . expr / expr
    (38) expr -> . expr * expr
    (39) expr -> . expr ^ expr
    (40) expr -> . expr % expr
    (41) expr -> . expr - expr
    (42) expr -> . expr + expr
    (43) expr -> . TYPEOF expr
    IDENTIFIER      shift and go to state 53
    PARAM           shift and go to state 25
    ARGV            shift and go to state 26
    ARGC            shift and go to state 27
    ARRAY           shift and go to state 14
    FLOAT           shift and go to state 28
    GLOBAL          shift and go to state 54
    (               shift and go to state 8
    -               shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 20
    TYPEOF          shift and go to state 31

    expr                           shift and go to state 116

state 115

    (23) statement -> FUNCTION IDENTIFIER ( ) { .
    $end            reduce using rule 23 (statement -> FUNCTION IDENTIFIER ( ) { .)


state 116

    (16) statement -> ASSERT ( condition ) , expr .
    (28) expr -> expr . ARRAY
    (37) expr -> expr . / expr
    (38) expr -> expr . * expr
    (39) expr -> expr . ^ expr
    (40) expr -> expr . % expr
    (41) expr -> expr . - expr
    (42) expr -> expr . + expr
    $end            reduce using rule 16 (statement -> ASSERT ( condition ) , expr .)
    ARRAY           shift and go to state 44
    /               shift and go to state 45
    *               shift and go to state 46
    ^               shift and go to state 47
    %               shift and go to state 48
    -               shift and go to state 49
    +               shift and go to state 50


Conflicts:

shift/reduce conflict for ARRAY in state 5 resolved as shift
shift/reduce conflict for + in state 5 resolved as shift
shift/reduce conflict for ARRAY in state 70 resolved as shift
shift/reduce conflict for / in state 70 resolved as shift
shift/reduce conflict for * in state 70 resolved as shift
shift/reduce conflict for ^ in state 70 resolved as shift
shift/reduce conflict for % in state 70 resolved as shift
shift/reduce conflict for - in state 70 resolved as shift
shift/reduce conflict for + in state 70 resolved as shift
shift/reduce conflict for ARRAY in state 72 resolved as shift
shift/reduce conflict for / in state 72 resolved as shift
shift/reduce conflict for * in state 72 resolved as shift
shift/reduce conflict for ^ in state 72 resolved as shift
shift/reduce conflict for % in state 72 resolved as shift
shift/reduce conflict for - in state 72 resolved as shift
shift/reduce conflict for + in state 72 resolved as shift
shift/reduce conflict for ARRAY in state 88 resolved as shift
shift/reduce conflict for / in state 88 resolved as shift
shift/reduce conflict for * in state 88 resolved as shift
shift/reduce conflict for ^ in state 88 resolved as shift
shift/reduce conflict for % in state 88 resolved as shift
shift/reduce conflict for - in state 88 resolved as shift
shift/reduce conflict for + in state 88 resolved as shift
shift/reduce conflict for ARRAY in state 89 resolved as shift
shift/reduce conflict for / in state 89 resolved as shift
shift/reduce conflict for * in state 89 resolved as shift
shift/reduce conflict for ^ in state 89 resolved as shift
shift/reduce conflict for % in state 89 resolved as shift
shift/reduce conflict for - in state 89 resolved as shift
shift/reduce conflict for + in state 89 resolved as shift