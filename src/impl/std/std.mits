function len () {
    var = param 0
    len = 0
    for ch in var { 
        len = len + 1
    } 
    return len
} fin

function append() {
    TheVar = param 0
    TheValue = param 1

    TheVar -> len()
    len = len()
    
    TheVar[len] = TheValue
    return TheVar
} fin

function splitchars() {
    i = param 0
    
    arr = []
    for x in i {
        arr -> append()
        x -> append() 
        arr = append()
        write x
    } 
    return arr
} fin

function stringify() {
    x = param 0
    return "{x}"
} fin


function getidn() {
    var = param 0
    val = param 1
    idn = 0
    arr = []
    for elem in var {
        if (elem == val) {
            arr -> append()
            idn -> append()
            arr = append()
        } 
        idn ++
    } 
    return arr
} fin


function pop() {
   TheVar = param 0
    TheVar -> len()
    len =  len()
    idx = 0
    arr = []
    ret = TheVar[len - 1]
    while (idx < len - 1) { 
        arr -> len()
        arl = len()
        arr[arl] = TheVar[idx]
        idx = idx + 1
    } 
    return [arr, ret]
} fin


function splitwords() {
   string = param 0
   string = string + "\s"
   tmp = ""
   arr = []
   for char in string {
      
      if (char != "\s") {
         tmp = tmp + char
      }
      else {
        arr -> append()
        tmp -> append()
        arr = append()
        tmp = ""
      }
      
   }
   return arr
} fin


function splitlines () {
   string = param 0
   string = string + "\n"
   tmp = ""
   arr = []
   for char in string {
      
      if (char != "\n") {
         tmp = tmp + char
      }
      else {
        arr -> append()
        tmp -> append()
        arr = append()
        tmp = ""
      }
      
   }
   return arr

   
} fin


function startswith() {
   val = param 0
   prefix = param 1
   
   t = 10 == 10
   f = 10 != 10
   res = 0
   prefix -> len()
   len = len()
   if(len == 1) {
      if (val[0] == prefix){
         res = t
      } 
      else {
         res = f
      }
   }
   else {
       idn  = 0
       tocom = []
      while (idn < len ) {
         v = val[idn]
         
         tocom -> append()
         v -> append()
         tocom = append()
         idn ++
      }
      prefix -> splitchars()
      tocom1 = splitchars()
      if (tocom == tocom1) {
         res = t
      }
      else {
         res = f
      }
   }
   return res
} fin


function endswith() {
   val = param 0
   pref = param 1 
   val -> len()
   vlen = len()

   pref -> len()
   plen = len()
   res = 0
   if (plen == 1) {
      if (val[vlen - 1] == pref) {
         res = true
      } 
      if (val[vlen - 1] != pref) {
         res = false
      }
   }
   else {
      val -> splitchars()
      val = splitchars()
     
      lv = vlen - plen
      arr = []
      while (lv < vlen ) {
         v = val[lv]
         write v
         arr -> append()
         v -> append()
         arr = append()
         lv = lv + 1
      }
      pref -> splitchars()
      pref = splitchars()
     
      if (arr == pref) {
         res = true
      }
      else {
         res = false
      }
     
      
      
   }
   return res
} fin


 function ToIntiger () {
    x = param 0
    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    arr1 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]

    res = 0
   
    for i in x {
        arr1 -> getidn()
        i -> getidn()
        idn = getidn()
        x = idn[0]
        y = arr[x]
        res = 10 * res + y 

        

    }
    
    return res

} fin


function range() {
    from = param 0
    to = param 1
    arr = []
    while (from != to) {
        arr -> append()
        from -> append()
        arr = append()
        from ++
    }
    return arr
} fin